import unittest
import uuid
import os
import glob
import responses
import time
import copy
import atproto
from dataclasses import dataclass
from unittest.mock import patch, call
from datetime import datetime, timezone
from typing import List
from .xposter import xpost, XpostConfig


@dataclass
class TestItem:
    description_html: str
    index: int
    rt_twitter_handle: str = None


def _response_with_items(items: List[TestItem]):
    def item_to_xml(item: TestItem):
        return f"""<item>
    <title>title</title>
    <dc:creator>@{item.rt_twitter_handle if item.rt_twitter_handle else 'twitter_handle'}</dc:creator>
    <description><![CDATA[{item.description_html}]]></description>
    <pubDate>{datetime.now(timezone.utc).strftime("%a, %d %b %Y %H:%M:%S GMT")}</pubDate>
    <guid>http://nitter.example.com/{item.rt_twitter_handle if item.rt_twitter_handle else 'twitter_handle'}/status/{item.index}#m</guid>
    <link>http://nitter.example.com/{item.rt_twitter_handle if item.rt_twitter_handle else 'twitter_handle'}/status/{item.index}#m</link>
</item>"""

    return f"""<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <atom:link href="http://nitter.example.com/twitter_handle/rss" rel="self" type="application/rss+xml" />
    <title>twitter_handle / @twitter_handle</title>
    <link>http://nitter.example.com/twitter_handle</link>
    <description>Twitter feed for: @twitter_handle. Generated by nitter.example.com
</description>
    <language>en-us</language>
    <ttl>40</ttl>
    {'\n'.join(map(item_to_xml, items))}
  </channel>
</rss>
"""


def _response(description_html: str):
    return _response_with_items([
        TestItem(description_html, 1)
    ])


class XposterTestCase(unittest.TestCase):
    def setUp(self):
        self.xpost_config = XpostConfig(
            sqlite_file=f"test_{uuid.uuid4()}.db",
            nitter_host='nitter.example.com',
            nitter_https=True,
            twitter_handle='twitter_handle',
            mastodon_host='mastodon.example.com',
            mastodon_client_id='client_id',
            mastodon_client_secret='client_secret',
            mastodon_access_token='access_token',
            mastodon_status_limit=10,
            bsky_handle=None,
            bsky_password=None,
            bsky_status_limit=10
        )

    def _add_response(self, body):
        responses.add(
            responses.GET,
            'https://nitter.example.com/twitter_handle/rss',
            status=200,
            content_type='application/rss+xml',
            body=body
        )

    @patch('nitter_xposter.xposter.Mastodon')
    @responses.activate
    def test_xpost_fail_to_parse(self, mock_Mastodon):
        self._add_response('<?xml version="1.0')
        mock_mastodon = mock_Mastodon.return_value
        
        with self.assertRaises(Exception):
            xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

    @patch('nitter_xposter.xposter.Mastodon')
    @responses.activate
    def test_xpost_first_time_no_status(self, mock_Mastodon):
        self._add_response(_response("<p>test</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

    @patch('nitter_xposter.xposter.Mastodon')
    @responses.activate
    def test_xpost_no_new_status(self, mock_Mastodon):
        self._add_response(_response("<p>test</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response("<p>test</p>"))
        
        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()
    
    @patch('nitter_xposter.xposter.Mastodon')
    @responses.activate
    def test_xpost_one_new_status(self, mock_Mastodon):
        self._add_response(_response("<p>test</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response_with_items([
            TestItem("<p>test 2</p>", 2),
            TestItem("<p>test 1</p>", 1),
        ]))
        
        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_called_once_with(status="test 2", media_ids=[])

    @patch('nitter_xposter.xposter.Mastodon')
    @responses.activate
    def test_xpost_no_last_position_found(self, mock_Mastodon):
        self._add_response(_response("<p>test</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response_with_items([
            TestItem("<p>test 6</p>", 6),
            TestItem("<p>test 5</p>", 5),
        ]))
        
        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

    @patch('nitter_xposter.xposter.Mastodon')
    @responses.activate
    def test_xpost_one_new_status_with_rt(self, mock_Mastodon):
        self._add_response(_response("<p>test</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response_with_items([
            TestItem("<p>test 2</p>", 2, rt_twitter_handle='rt_twitter_handle'),
            TestItem("<p>test 1</p>", 1),
        ]))
        
        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_called_once_with(status="test 2\nRT: https://twitter.com/rt_twitter_handle/status/2#m", media_ids=[])

    @patch('nitter_xposter.xposter.Mastodon')
    @patch('nitter_xposter.xposter.download_image_to_tmp_file')
    @patch('nitter_xposter.xposter.cleanup_tmp_file')
    @responses.activate
    def test_xpost_one_new_status_with_img(self, mock_cleanup_tmp_file, mock_download_image_to_tmp_file, mock_Mastodon):
        self._add_response(_response("<p>test</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response_with_items([
            TestItem("<p>test 2</p><img src=\"http://nitter.example.com/pic/media%2Faaaaaa.jpg\" style=\"max-width:250px;\" />", 2),
            TestItem("<p>test 1</p>", 1),
        ]))
        
        mock_download_image_to_tmp_file.return_value = "tmp_file"
        mock_mastodon.media_post.return_value = {'id': 'bbbbbb'}
        xpost(self.xpost_config)
        mock_download_image_to_tmp_file.assert_called_once_with("http://nitter.example.com/pic/media%2Faaaaaa.jpg")
        mock_mastodon.media_post.assert_called_once_with("tmp_file")
        mock_cleanup_tmp_file.assert_called_once_with("tmp_file")
        mock_mastodon.status_post.assert_called_once_with(status="test 2", media_ids=['bbbbbb'])

    @patch('nitter_xposter.xposter.Mastodon')
    @patch('nitter_xposter.xposter.download_image_to_tmp_file')
    @patch('nitter_xposter.xposter.cleanup_tmp_file')
    @responses.activate
    def test_xpost_one_new_status_with_img_but_failed_to_download(self, mock_cleanup_tmp_file, mock_download_image_to_tmp_file, mock_Mastodon):
        self._add_response(_response("<p>test 1</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response_with_items([
            TestItem("<p>test 3</p><img src=\"http://nitter.example.com/pic/media%2Faaaaaa.jpg\" style=\"max-width:250px;\" />", 3),
            TestItem("<p>test 2</p>", 2),
            TestItem("<p>test 1</p>", 1),
        ]))
        mock_download_image_to_tmp_file.return_value = None

        xpost(self.xpost_config)

        # call a third time to make sure
        # the position was indeed updated to test 2
        # after failed to download image for test 3
        # instead of getting stuck at test 1 and reposting test 2
        xpost(self.xpost_config)
        mock_download_image_to_tmp_file.assert_called_with("http://nitter.example.com/pic/media%2Faaaaaa.jpg")
        mock_mastodon.media_post.assert_not_called()
        mock_cleanup_tmp_file.assert_not_called()
        mock_mastodon.status_post.assert_called_once_with(status="test 2", media_ids=[])

    @patch('nitter_xposter.xposter.Mastodon')
    @responses.activate
    def test_xpost_one_new_status_with_nitter_links(self, mock_Mastodon):
        self._add_response(_response("<p>test</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response_with_items([
            TestItem("<p>test 2 <a href=\"http://nitter.example.com/search?q=%23hashtag\">#hashtag</a></p>", 2),
            TestItem("<p>test 1</p>", 1),
        ]))
        
        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_called_once_with(status="test 2 https://twitter.com/search?q=%23hashtag", media_ids=[])

    @patch('nitter_xposter.xposter.Client')
    @responses.activate
    def test_xpost_one_new_status_to_bsky_with_links(self, mock_AtProtoClient):
        self._add_response(_response("<p>test</p>"))
        mock_bsky_client = mock_AtProtoClient.return_value

        xpost_config = XpostConfig(
            sqlite_file=f"test_{uuid.uuid4()}.db",
            nitter_host='nitter.example.com',
            nitter_https=True,
            twitter_handle='twitter_handle',
            mastodon_host=None,
            mastodon_client_id=None,
            mastodon_client_secret=None,
            mastodon_access_token=None,
            mastodon_status_limit=10,
            bsky_handle='test_handle',
            bsky_password='test_password_this_should_not_work',
            bsky_status_limit=10
        )

        xpost(xpost_config)
        mock_bsky_client.send_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response_with_items([
            TestItem("test 5 <p><a href=\"http://nitter.example.com/search?q=%23hashtag\">#hashtag</a></p> test 5 <p><a href=\"http://nitter.example.com/search?q=%23hashtag2\">#hashtag2</a></p> test 5", 5),
            TestItem("<p><a href=\"http://nitter.example.com/search?q=%23hashtag\">#hashtag</a></p> test 4", 4),
            TestItem("<p>test 3 <a href=\"http://nitter.example.com/search?q=%23hashtag\">#hashtag</a></p>", 3),
            TestItem("<p>test 2</p>", 2),
            TestItem("<p>test 1</p>", 1),
        ]))
        
        def link_facet(uri: str, byte_start: int, byte_end: int) -> 'atproto.models.AppBskyRichtextFacet.Main':
            return atproto.models.AppBskyRichtextFacet.Main(
                features=[
                    atproto.models.AppBskyRichtextFacet.Link(
                        uri=uri
                    )
                ],
                index=atproto.models.AppBskyRichtextFacet.ByteSlice(
                    byte_start=byte_start,
                    byte_end=byte_end
                )
            )

        def text_only_send_post_call(text: str, link_facets: List['atproto.models.AppBskyRichtextFacet.Main']):
            return call(
                text=text,
                profile_identify=None,
                reply_to=None,
                embed=atproto.models.AppBskyEmbedImages.Main(
                    images=[],
                ),
                langs=None,
                facets=link_facets
            )

        xpost(xpost_config)
        expected_calls = [
            text_only_send_post_call(
                text="test 2",
                link_facets=[]
            ),
            text_only_send_post_call(
                text="test 3 https://twitter.com/search?...",
                link_facets=[
                    link_facet("https://twitter.com/search?q=%23hashtag", 7, 37)
                ]
            ),
            text_only_send_post_call(
                text="https://twitter.com/search?...test 4",
                link_facets=[
                    link_facet("https://twitter.com/search?q=%23hashtag", 0, 30)
                ]
            ),
            text_only_send_post_call(
                text="test 5 https://twitter.com/search?...test 5 https://twitter.com/search?...test 5",
                link_facets=[
                    link_facet("https://twitter.com/search?q=%23hashtag", 7, 37),
                    link_facet("https://twitter.com/search?q=%23hashtag2", 44, 74),
                ]
            )
        ]
        self.assertEqual(mock_bsky_client.send_post.call_args_list, expected_calls)

    @patch('nitter_xposter.xposter.Mastodon')
    @responses.activate
    def test_xpost_multiple_new_statuses(self, mock_Mastodon):
        self._add_response(_response("<p>test</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response_with_items([
            TestItem("<p>test 3</p>", 3),
            TestItem("<p>test 2</p>", 2),
            TestItem("<p>test 1</p>", 1),
        ]))
        
        xpost(self.xpost_config)
        expected_calls = [
            call(status="test 2", media_ids=[]),
            call(status="test 3", media_ids=[])
        ]
        self.assertEqual(mock_mastodon.status_post.call_args_list, expected_calls)

    
    @patch('nitter_xposter.xposter.Mastodon')
    @responses.activate
    def test_xpost_multiple_new_statuses_exceeding_limit(self, mock_Mastodon):
        self._add_response(_response("<p>test</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost_config = copy.copy(self.xpost_config)
        xpost_config.mastodon_status_limit = 2
        xpost(xpost_config)
        mock_mastodon.status_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response_with_items([
            TestItem("<p>test 4</p>", 4),
            TestItem("<p>test 3</p>", 3),
            TestItem("<p>test 2</p>", 2),
            TestItem("<p>test 1</p>", 1),
        ]))
        
        xpost(xpost_config)
        expected_calls = [
            call(status="test 2", media_ids=[]),
            call(status="test 3", media_ids=[])
        ]
        self.assertEqual(mock_mastodon.status_post.call_args_list, expected_calls)


    @patch('nitter_xposter.xposter.Mastodon')
    @responses.activate
    def test_xpost_multiple_new_statuses_but_one_errored(self, mock_Mastodon):
        self._add_response(_response("<p>test</p>"))
        mock_mastodon = mock_Mastodon.return_value

        xpost(self.xpost_config)
        mock_mastodon.status_post.assert_not_called()

        time.sleep(1)
        self._add_response(_response_with_items([
            TestItem("<p>test 4</p>", 4),
            TestItem("<p>test 3</p>", 3),
            TestItem("<p>test 2</p>", 2),
            TestItem("<p>test 1</p>", 1),
        ]))
        
        mock_mastodon.status_post.side_effect = [None, Exception("Error posting status"), None]
        xpost(self.xpost_config)
        expected_calls = [
            call(status="test 2", media_ids=[]),
            call(status="test 3", media_ids=[])
        ]
        self.assertEqual(mock_mastodon.status_post.call_args_list, expected_calls)
        mock_mastodon.status_post.side_effect = [None, None]
        xpost(self.xpost_config)
        expected_calls = [
            call(status="test 2", media_ids=[]),
            call(status="test 3", media_ids=[]),
            call(status="test 3", media_ids=[]),
            call(status="test 4", media_ids=[])
        ]
        self.assertEqual(mock_mastodon.status_post.call_args_list, expected_calls)

    @classmethod
    def tearDownClass(cls):
        test_db_files = glob.glob('test_*.db')
        for file in test_db_files:
            os.remove(file)
